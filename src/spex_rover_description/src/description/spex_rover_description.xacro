<?xml version="1.0"?>
<robot name="spex_rover" xmlns:xacro="http://ros.org/wiki/xacro">
  <!--
  The GazeboRosImuSensor Gazebo SensorPlugin

  Defining robot constants
  The base_* properties all define the size of hte robot’s main chassis 
  -->
  <xacro:property name="base_width" value="0.75"/>
  <xacro:property name="base_length" value="0.75"/>
  <xacro:property name="base_height" value="0.6"/>

  <!-- The wheel_radius and wheel_width define the shape of the robot’s wheels -->
  <xacro:property name="wheel_radius" value="0.10"/>
  <xacro:property name="wheel_width" value="0.04"/>
  
  <!-- The wheel_ygap adjusts the gap between the wheel and the chassis along the y-axis -->
  <xacro:property name="wheel_ygap" value="0.025"/>
  
  <!-- The wheel_zoff and wheel_xoff position the front and back wheels along the z-axis and x-axis
       appropriately -->
  <xacro:property name="wheel_front_zoff" value="0.30"/>
  <xacro:property name="wheel_back_zoff" value="0.30"/>
  <xacro:property name="wheel_front_xoff" value="0.25"/>
  <xacro:property name="wheel_back_xoff" value="0.25"/>

  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <!-- 
  Robot Base
  A link element describes a rigid part or component of the robot.
  This link will (temporarily) be a large box and will act as the main chassis of 
  the robot
  -->
  <link name="base_link">
    <!-- visual tag only applies visual parameters  -->
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
  <!-- Adding collision areas to the base_link using the <collision> tag -->
  <collision>
      <!-- using the box_inertia macro defined before to add some inertial properties to our base_link -->
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="40" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>

  <!--
  Robot Footprint 
  The base_footprint link is a virtual (non-physical) link which has no dimensions or
  collision areas. Its primary purpose is to enable various packages determine the center
  of a robot projected to the ground.
  -->
  <link name="base_footprint"/>
  <!-- 
  we then add a joint to connect it to base_link. In URDF, a joint element describes the
  kinematic and dynamic properties between coordinate frames.
  -->
  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <!--
    We take the sum of the wheel_radius and the wheel_zoff to get the appropriate location
    along the z-axis.
    -->
    <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_front_zoff)}" rpy="0 0 0"/>
  </joint>

  <!--
  Wheels
  To make our code cleaner and avoid repetition, we will make use of macros to define a block of
  code that will be repeated with differing parameters.
  
  The wheel macro has 3 params:
        - prefix: adds a prefix to our link and joint names
        - x_reflect and y_reflect: allows us to flip the positions of our wheels with respect to
                                   the x and y axis respectively.
  -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect location">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
      <!-- Wheel collisions -->
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>
    
    <!--
    We will define a continuous joint to allow our wheels to freely rotate about an axis. 
    This joint also connects our wheel to the base_link at the appropriate location.
    -->
    <!--
    <xacro:property name="front_position" value="front"/>
    <xacro:property name="back_position" value="back"/>
    -->
    <xacro:if value="${location == 'front'}">
      <joint name="${prefix}_joint" type="continuous">
        <parent link="base_link"/>
        <child link="${prefix}_link"/>
        <origin xyz="${x_reflect*wheel_front_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_front_zoff}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
      </joint>
    </xacro:if>
    <xacro:if value="${location == 'back'}">
      <joint name="${prefix}_joint" type="continuous">
        <parent link="base_link"/>
        <child link="${prefix}_link"/>
        <origin xyz="${x_reflect*wheel_back_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_back_zoff}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
      </joint>
    </xacro:if>
  </xacro:macro>

  <!-- Instantiating 4 wheels using the macro created above -->
  <xacro:wheel prefix="drivewhl_fl" x_reflect="1" y_reflect="1" location="front" />
  <xacro:wheel prefix="drivewhl_fr" x_reflect="1" y_reflect="-1" location="front" />
  <xacro:wheel prefix="drivewhl_bl" x_reflect="-1" y_reflect="1" location="back" />
  <xacro:wheel prefix="drivewhl_br" x_reflect="-1" y_reflect="-1" location="back" />

  <link name="imu_link">
  <visual>
    <geometry>
      <box size="0.1 0.1 0.1"/>
    </geometry>
  </visual>

  <collision>
    <geometry>
      <box size="0.1 0.1 0.1"/>
    </geometry>
  </collision>

  <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
</link>

<joint name="imu_joint" type="fixed">
  <parent link="base_link"/>
  <child link="imu_link"/>
  <origin xyz="0 0 0.01"/>
</joint>
<!-- Setting /demo/imu as the topic to which the IMU will be publishing its information -->
<gazebo reference="imu_link">
  <sensor name="imu_sensor" type="imu">
    <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/demo</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>


</robot>