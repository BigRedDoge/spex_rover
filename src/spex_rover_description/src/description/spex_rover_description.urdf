<?xml version="1.0"?>
<robot name="spex_rover" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Define robot constants -->
  <!-- The base_* properties all define the size of hte robot’s main chassis -->
  <xacro:property name="base_width" value="0.5"/>
  <xacro:property name="base_length" value="0.5"/>
  <xacro:property name="base_height" value="0.3"/>

  <!-- The wheel_radius and wheel_width define the shape of the robot’s wheels -->
  <xacro:property name="wheel_radius" value="0.10"/>
  <xacro:property name="wheel_width" value="0.04"/>
  
  <!-- The wheel_ygap adjusts the gap between the wheel and the chassis along the y-axis -->
  <xacro:property name="wheel_ygap" value="0.025"/>
  
  <!-- The wheel_zoff and wheel_xoff position the front and back wheels along the z-axis and x-axis
       appropriately -->
  <xacro:property name="wheel_front_zoff" value="0.05"/>
  <xacro:property name="wheel_front_xoff" value="0.12"/>
  <xacro:property name="wheel_back_zoff" value="0.05"/>
  <xacro:property name="wheel_back_xoff" value="0.38"/>
  

  <!-- 
  Robot Base
  A link element describes a rigid part or component of the robot.
  This link will (temporarily) be a large box and will act as the main chassis of 
  the robot
  -->
  <link name="base_link">
    <!-- visual tag only applies visual parameters  -->
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
  </link>

  <!--
  Robot Footprint 
  The base_footprint link is a virtual (non-physical) link which has no dimensions or
  collision areas. Its primary purpose is to enable various packages determine the center
  of a robot projected to the ground.
  -->
  <link name="base_footprint"/>
  <!-- 
  we then add a joint to connect it to base_link. In URDF, a joint element describes the
  kinematic and dynamic properties between coordinate frames.
  -->
  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <!--
    We take the sum of the wheel_radius and the wheel_zoff to get the appropriate location
    along the z-axis.
    -->
    <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
  </joint>

  <!--
  Wheels
  To make our code cleaner and avoid repetition, we will make use of macros to define a block of
  code that will be repeated with differing parameters.
  
  The wheel macro has 3 params:
        - prefix: adds a prefix to our link and joint names
        - x_reflect and y_reflect: allows us to flip the positions of our wheels with respect to
                                   the x and y axis respectively.
  -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
    </link>
    
    <!--
    We will define a continuous joint to allow our wheels to freely rotate about an axis. 
    This joint also connects our wheel to the base_link at the appropriate location.
    -->
    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <!-- Instantiating 4 wheels using the macro created above -->
  <xacro:wheel prefix="drivewhl_fl" x_reflect="1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_fr" x_reflect="1" y_reflect="-1" />
  <xacro:wheel prefix="drivewhl_bl" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_br" x_reflect="-1" y_reflect="-1" />

</robot>